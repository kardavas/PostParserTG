import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from parser import parse_channel_posts
import asyncio

load_dotenv()

# Replace hardcoded token with environment variable
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

CHANNEL, DATE_FROM, DATE_TO = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start from {update.effective_user.id}")
    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_parsing")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Post Parser Bot!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "üìä *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ—Å—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª/—Ä–µ–ø–æ—Å—Ç)\n"
        "‚Ä¢ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    await update.message.reply_text(
        welcome_message, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_parsing":
        await query.edit_message_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/durov –∏–ª–∏ durov):")
        return CHANNEL

async def parse_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/durov –∏–ª–∏ durov):")
    return CHANNEL

async def get_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = update.message.text.strip()
    if channel.startswith("https://t.me/"):
        channel = channel.replace("https://t.me/", "")
    if channel.startswith("@"):
        channel = channel[1:]
    context.user_data['channel'] = channel
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return DATE_FROM

async def get_date_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_from = update.message.text.strip()
    context.user_data['date_from'] = date_from
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return DATE_TO

async def get_date_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_to = update.message.text.strip()
    channel = context.user_data['channel']
    date_from = context.user_data['date_from']
    await update.message.reply_text("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=ReplyKeyboardRemove())
    try:
        logger.info(f"–ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª: {channel} —Å {date_from} –ø–æ {date_to}")
        csv_path = await parse_channel_posts(channel, date_from, date_to)
        await update.message.reply_document(open(csv_path, "rb"))
        logger.info(f"–§–∞–π–ª {csv_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("parse", parse_start), CallbackQueryHandler(button_callback, pattern="start_parsing")],
        states={
            CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel)],
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date_from)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date_to)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()